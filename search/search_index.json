{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MathDyanmics API","text":"<p>Welcome to MathDynamics API, I hope you think the visuals are cool, and learn a little something new...</p> <p>These documents capture the underlying code and computational elements of the API. </p>"},{"location":"#topics-and-docs","title":"Topics and Docs","text":""},{"location":"#api-endpoints","title":"API Endpoints","text":""},{"location":"#mandelbrot-set","title":"Mandelbrot Set","text":""},{"location":"endpoints/","title":"API Endpoints","text":""},{"location":"endpoints/#app.main.mandelbrot_set","title":"<code>mandelbrot_set(width, height, max_iterations, colour)</code>  <code>async</code>","text":"<p>Mandelbrot set endpoint, specifically tailored to showcase gradually finer details of the set based on the maximum iteration. </p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>The width of the complex number (c) grid. This can be thought of as the width of the returned gif.</p> required <code>height</code> <code>int</code> <p>The height of the complex number (c) grid. This can be thought of as the height of the returned gif.</p> required <code>max_iterations</code> <code>int</code> <p>The maximum iteration value</p> required <code>colour</code> <code>string</code> <p>Specify the colour to be used for visualization. Colours available correspond to matplotlib colourmaps</p> required <p>Returns:</p> Type Description <code>FileResponse</code> <p>A file response of file type <code>.gif</code></p> Source code in <code>app/main.py</code> <pre><code>@app.get(\"/mandelbrot\")\nasync def mandelbrot_set(width: int, height: int, max_iterations: int, colour: str):\n    \"\"\"Mandelbrot set endpoint, specifically tailored to showcase gradually finer details of the set based on the maximum iteration. \n\n    Parameters:\n        width (int): The width of the complex number (c) grid. This can be thought of as the width of the returned gif.\n        height (int): The height of the complex number (c) grid. This can be thought of as the height of the returned gif.\n        max_iterations (int): The maximum iteration value\n        colour (string): Specify the colour to be used for visualization. Colours available correspond to [matplotlib colourmaps](https://matplotlib.org/stable/users/explain/colors/colormaps.html)\n\n    Returns:\n        (FileResponse): A file response of file type `.gif`\n    \"\"\"\n    mandelbrot_iter_gif_path = mandelbrot_iteration_generation(width=width,\n                                                          height=height,\n                                                          max_iterations=max_iterations,\n                                                          colour=colour)\n\n    return FileResponse(mandelbrot_iter_gif_path)\n</code></pre>"},{"location":"mandelbrot/","title":"Mandelbrot Set","text":""},{"location":"mandelbrot/#app.fractals.mandelbrot.mandelbrot_calc","title":"<code>mandelbrot_calc(c, max_iteration)</code>","text":"<p>Mandelbrot calculation to return the iteration at which the pattern becomes unbound, or achieves the max iteration.</p> <p>Parameters:</p> Name Type Description Default <code>c</code> <code>complex</code> <p>The point in the complex plane at which</p> required <code>max_iteration</code> <code>int</code> <p>The maximum iteraton to consider for the mandelbrot set</p> required <p>Returns:</p> Type Description <code>int</code> <p>The numer of iterations until the pattern becomes unbound (or the max_iterations)</p> Source code in <code>app/fractals/mandelbrot.py</code> <pre><code>def mandelbrot_calc(c, max_iteration):\n    \"\"\"Mandelbrot calculation to return the iteration at which the pattern becomes unbound, or achieves the max iteration.\n\n    Parameters:\n        c (complex): The point in the complex plane at which\n        max_iteration (int): The maximum iteraton to consider for the mandelbrot set\n\n    Returns:\n        (int): The numer of iterations until the pattern becomes unbound (or the max_iterations)\n    \"\"\"\n    z = c\n    for n in range(max_iteration):\n        if abs(z) &gt; 2:  # Escape condition checking\n            return n  # Return number of iterations before becoming unbound\n        z = z*z + c\n    return max_iteration  # Pattern still bound, returning max iteration\n</code></pre>"},{"location":"mandelbrot/#app.fractals.mandelbrot.mandelbrot_frame","title":"<code>mandelbrot_frame(width, height, iteration, max_iteration)</code>","text":"<p>Create a Mandelbrot frame based on the specified iteration value. </p> <p>This generates a single frame that will be included within the complete gif. </p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>The width of the complex number (c) grid. This can be thought of as the width of the returned gif.</p> required <code>height</code> <code>int</code> <p>The height of the complex number (c) grid. This can be thought of as the height of the returned gif.</p> required <code>iteration</code> <code>int</code> <p>The current maximum iteration value under consideration. </p> required <code>max_iteration</code> <code>int</code> <p>The maximum iteration value.</p> required <p>Returns:</p> Type Description <code>matrix</code> <p>A numpy array containing a single frame of the Mandelbrot set.</p> Source code in <code>app/fractals/mandelbrot.py</code> <pre><code>def mandelbrot_frame(width: int, height: int, iteration: int, max_iteration: int):\n    \"\"\"Create a Mandelbrot frame based on the specified iteration value. \n\n    This generates a single frame that will be included within the complete gif. \n\n    Parameters:\n        width (int): The width of the complex number (c) grid. This can be thought of as the width of the returned gif.\n        height (int): The height of the complex number (c) grid. This can be thought of as the height of the returned gif.\n        iteration (int): The current maximum iteration value under consideration. \n        max_iteration (int): The maximum iteration value.\n\n    Returns:\n        (np.matrix): A numpy array containing a single frame of the Mandelbrot set.\n    \"\"\"\n    img = np.zeros((width, height))  # Create a blank image \n\n    for x in range(width):  # Iterate through frame grid\n        for y in range(height):\n\n            c = complex(-2 + 2.5 * x / width, -1.25 + 2.5 * y / height)  # Convert pixel coordinate to complex number\n            m = mandelbrot_calc(c, iteration)  # Compute the number of iterations\n            color = 255 - int(m * 255 / max_iteration)  # Color depends on the number of iterations\n            img[y, x] = color # Add value to the frame\n\n    return img\n</code></pre>"},{"location":"mandelbrot/#app.fractals.mandelbrot.mandelbrot_iteration_generation","title":"<code>mandelbrot_iteration_generation(width, height, max_iterations, colour)</code>","text":"<p>Generate a Mandelbrot GIF, based on successive maximum iterations to reveal a finer pattern corresponding to higher maximum iteration scores</p> <p>The method will generate successive Mandelbrot frames, using a range of iteration values from 2-<code>max_iteration</code> in steps of 10.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>The width of the complex number (c) grid. This can be thought of as the width of the returned gif.</p> required <code>height</code> <code>int</code> <p>The height of the complex number (c) grid. This can be thought of as the height of the returned gif.</p> required <code>max_iterations</code> <code>int</code> <p>The maximum iteration value</p> required <code>colour</code> <code>string</code> <p>Specify the colour to be used for visualization. Colours available correspond to matplotlib colourmaps</p> required <p>Returns:</p> Type Description <code>path</code> <p>The file path to the newly created mandelbrot gif resource.</p> Source code in <code>app/fractals/mandelbrot.py</code> <pre><code>def mandelbrot_iteration_generation(width: int, height: int, max_iterations: int, colour: str):\n    \"\"\" Generate a Mandelbrot GIF, based on successive maximum iterations to reveal a finer pattern corresponding to higher\n    maximum iteration scores\n\n    The method will generate successive Mandelbrot frames, using a range of iteration values from 2-`max_iteration` in steps of 10.\n\n    Parameters:\n        width (int): The width of the complex number (c) grid. This can be thought of as the width of the returned gif.\n        height (int): The height of the complex number (c) grid. This can be thought of as the height of the returned gif.\n        max_iterations (int): The maximum iteration value\n        colour (string): Specify the colour to be used for visualization. Colours available correspond to [matplotlib colourmaps](https://matplotlib.org/stable/users/explain/colors/colormaps.html)\n\n    Returns:\n        (os.path): The file path to the newly created mandelbrot gif resource. \n    \"\"\"\n    frames = []  # Store the frames\n\n    for i in range(2, max_iterations + 1, 10):  # generate number of frames (steps of 5)\n        frame_i = mandelbrot_frame(width=width, height=height, iteration=i, max_iteration=max_iterations)  # Create the frame rendered from iteration i\n        save_frame(frames_store=frames, img=frame_i, iteration=i, colour=colour)  # Save the created frame\n\n    file_name = os.path.join(resource_path, f'mandelbrot_iter_{width}_{height}_{max_iterations}_{colour}.gif')\n    imageio.mimsave(file_name, frames, fps=1, loop=0)  # Generate GIF\n    return file_name\n</code></pre>"},{"location":"mandelbrot/#app.fractals.mandelbrot.save_frame","title":"<code>save_frame(frames_store, img, iteration, colour)</code>","text":"<p>Saving a numpy matrix frame into an image frame to be used when creating the Mandelbrot gif. </p> <p>Frame is saved in a temporary folder, such that its memory is volatile. </p> <p>The method returns no value, as the list is passed by reference.</p> <p>Parameters:</p> Name Type Description Default <code>frames_store</code> <code>list</code> <p>A list containing the frames that will make up the gif. </p> required <code>img</code> <code>matrix</code> <p>The current frame as a matrix to be transformed into an image</p> required <code>iteration</code> <code>int</code> <p>The current maximum iteration value under consideration. This is the value used to generate the frame parameter.</p> required <code>colour</code> <code>string</code> <p>Specify the colour to be used for visualization. Colours available correspond to matplotlib colourmaps</p> required Source code in <code>app/fractals/mandelbrot.py</code> <pre><code>def save_frame(frames_store: list, img: np.matrix, iteration: int, colour: str):\n    \"\"\"Saving a numpy matrix frame into an image frame to be used when creating the Mandelbrot gif. \n\n    Frame is saved in a temporary folder, such that its memory is volatile. \n\n    The method returns no value, as the list is passed by reference.\n\n    Parameters:\n        frames_store (list): A list containing the frames that will make up the gif. \n        img (np.matrix): The current frame as a matrix to be transformed into an image\n        iteration (int): The current maximum iteration value under consideration. This is the value used to generate the frame parameter.\n        colour (string): Specify the colour to be used for visualization. Colours available correspond to [matplotlib colourmaps](https://matplotlib.org/stable/users/explain/colors/colormaps.html)\n    \"\"\"\n    fig, ax = plt.subplots()  # Create and save the current frame\n    ax.imshow(img, extent=[-2, 0.5, -1.25, 1.25], cmap=colour)  # Setting visual limits\n    ax.axis('off')  # Hide axes\n    fig.subplots_adjust(left=0, right=1, top=1, bottom=0)  # Remove padding and margins\n    fig.patch.set_facecolor('none')  # No background\n    ax.patch.set_alpha(0)  # Transparent axis\n\n    with tempfile.TemporaryDirectory() as temp_frames_path:\n        filename = os.path.join(temp_frames_path, f'frame_{iteration}.png')\n        plt.savefig(filename, transparent=True)  # Save with transparency\n        frames_store.append(imageio.imread(filename))  # Save the frame\n        plt.close(fig)\n</code></pre>"}]}